// AUTOGENERATED BY storj.io/dbx
// DO NOT EDIT.

package postgres

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"

	"github.com/lib/pq"
)

// Prevent conditional imports from causing build failures
var _ = strconv.Itoa
var _ = strings.LastIndex
var _ = fmt.Sprint
var _ sync.Mutex

var (
	WrapErr = func(err *Error) error { return err }
	Logger  func(format string, args ...interface{})

	errTooManyRows       = errors.New("too many rows")
	errUnsupportedDriver = errors.New("unsupported driver")
	errEmptyUpdate       = errors.New("empty update")
)

func logError(format string, args ...interface{}) {
	if Logger != nil {
		Logger(format, args...)
	}
}

type ErrorCode int

const (
	ErrorCode_Unknown ErrorCode = iota
	ErrorCode_UnsupportedDriver
	ErrorCode_NoRows
	ErrorCode_TxDone
	ErrorCode_TooManyRows
	ErrorCode_ConstraintViolation
	ErrorCode_EmptyUpdate
)

type Error struct {
	Err         error
	Code        ErrorCode
	Driver      string
	Constraint  string
	QuerySuffix string
}

func (e *Error) Error() string {
	return e.Err.Error()
}

func wrapErr(e *Error) error {
	if WrapErr == nil {
		return e
	}
	return WrapErr(e)
}

func makeErr(err error) error {
	if err == nil {
		return nil
	}
	e := &Error{Err: err}
	switch err {
	case sql.ErrNoRows:
		e.Code = ErrorCode_NoRows
	case sql.ErrTxDone:
		e.Code = ErrorCode_TxDone
	}
	return wrapErr(e)
}

func unsupportedDriver(driver string) error {
	return wrapErr(&Error{
		Err:    errUnsupportedDriver,
		Code:   ErrorCode_UnsupportedDriver,
		Driver: driver,
	})
}

func emptyUpdate() error {
	return wrapErr(&Error{
		Err:  errEmptyUpdate,
		Code: ErrorCode_EmptyUpdate,
	})
}

func tooManyRows(query_suffix string) error {
	return wrapErr(&Error{
		Err:         errTooManyRows,
		Code:        ErrorCode_TooManyRows,
		QuerySuffix: query_suffix,
	})
}

func constraintViolation(err error, constraint string) error {
	return wrapErr(&Error{
		Err:        err,
		Code:       ErrorCode_ConstraintViolation,
		Constraint: constraint,
	})
}

type driver interface {
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
}

var (
	notAPointer     = errors.New("destination not a pointer")
	lossyConversion = errors.New("lossy conversion")
)

type DB struct {
	*sql.DB
	dbMethods

	Hooks struct {
		Now func() time.Time
	}
}

func Open(driver, source string) (db *DB, err error) {
	var sql_db *sql.DB
	switch driver {
	case "postgres":
		sql_db, err = openpostgres(source)
	default:
		return nil, unsupportedDriver(driver)
	}
	if err != nil {
		return nil, makeErr(err)
	}
	defer func(sql_db *sql.DB) {
		if err != nil {
			sql_db.Close()
		}
	}(sql_db)

	if err := sql_db.Ping(); err != nil {
		return nil, makeErr(err)
	}

	db = &DB{
		DB: sql_db,
	}
	db.Hooks.Now = time.Now

	switch driver {
	case "postgres":
		db.dbMethods = newpostgres(db)
	default:
		return nil, unsupportedDriver(driver)
	}

	return db, nil
}

func (obj *DB) Close() (err error) {
	return obj.makeErr(obj.DB.Close())
}

func (obj *DB) Open(ctx context.Context) (*Tx, error) {
	tx, err := obj.DB.BeginTx(ctx, nil)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return &Tx{
		Tx:        tx,
		txMethods: obj.wrapTx(tx),
	}, nil
}

func (obj *DB) NewRx() *Rx {
	return &Rx{db: obj}
}

func DeleteAll(ctx context.Context, db *DB) (int64, error) {
	tx, err := db.Open(ctx)
	if err != nil {
		return 0, err
	}
	defer func() {
		if err == nil {
			err = db.makeErr(tx.Commit())
			return
		}

		if err_rollback := tx.Rollback(); err_rollback != nil {
			logError("delete-all: rollback failed: %v", db.makeErr(err_rollback))
		}
	}()
	return tx.deleteAll(ctx)
}

type Tx struct {
	Tx *sql.Tx
	txMethods
}

type dialectTx struct {
	tx *sql.Tx
}

func (tx *dialectTx) Commit() (err error) {
	return makeErr(tx.tx.Commit())
}

func (tx *dialectTx) Rollback() (err error) {
	return makeErr(tx.tx.Rollback())
}

type postgresImpl struct {
	db      *DB
	dialect __sqlbundle_postgres
	driver  driver
}

func (obj *postgresImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *postgresImpl) logStmt(stmt string, args ...interface{}) {
	postgresLogStmt(stmt, args...)
}

func (obj *postgresImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type postgresDB struct {
	db *DB
	*postgresImpl
}

func newpostgres(db *DB) *postgresDB {
	return &postgresDB{
		db: db,
		postgresImpl: &postgresImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *postgresDB) Schema() string {
	return `CREATE TABLE groups_s (
	cipher text NOT NULL,
	groupname text NOT NULL,
	educationalyear text NOT NULL,
	semester text NOT NULL,
	course text NOT NULL,
	subject integer NOT NULL,
	PRIMARY KEY ( cipher )
);
CREATE TABLE runners (
	runner_number integer NOT NULL,
	date_of_compilation timestamp with time zone NOT NULL,
	date_of_expiration timestamp with time zone NOT NULL,
	postponing_reason text NOT NULL,
	type_of_control text NOT NULL,
	teacher text NOT NULL,
	PRIMARY KEY ( runner_number )
);
CREATE TABLE runner_marks (
	check_mark integer NOT NULL,
	runner_mark_number integer NOT NULL,
	national_mark text NOT NULL,
	semester_mark integer NOT NULL,
	together_mark integer NOT NULL,
	ects_mark text NOT NULL,
	sheet_mark integer NOT NULL,
	runner integer NOT NULL,
	PRIMARY KEY ( runner_mark_number ),
	UNIQUE ( sheet_mark )
);
CREATE TABLE sheets (
	sheetid integer NOT NULL,
	number_of_attendees integer NOT NULL,
	number_of_absent integer NOT NULL,
	number_of_ineligible integer NOT NULL,
	type_of_control text NOT NULL,
	date_of_compilation timestamp with time zone NOT NULL,
	teacher text NOT NULL,
	group_cipher text NOT NULL,
	PRIMARY KEY ( sheetid ),
	UNIQUE ( group_cipher )
);
CREATE TABLE students (
	student_cipher text NOT NULL,
	firstname text NOT NULL,
	last_name text NOT NULL,
	middle_name text NOT NULL,
	record_book_number text NOT NULL,
	PRIMARY KEY ( student_cipher )
);
CREATE TABLE subjects (
	subjectid integer NOT NULL,
	subjectname text NOT NULL,
	educationallevel text NOT NULL,
	faculty text NOT NULL,
	PRIMARY KEY ( subjectid )
);
CREATE TABLE tableNews (
	id_t text NOT NULL,
	PRIMARY KEY ( id_t )
);
CREATE TABLE teachers (
	teacher_cipher text NOT NULL,
	firstname text NOT NULL,
	lastname text NOT NULL,
	middlename text NOT NULL,
	scientificdegree text NOT NULL,
	academictitles text NOT NULL,
	post text NOT NULL,
	PRIMARY KEY ( teacher_cipher )
);`
}

func (obj *postgresDB) wrapTx(tx *sql.Tx) txMethods {
	return &postgresTx{
		dialectTx: dialectTx{tx: tx},
		postgresImpl: &postgresImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type postgresTx struct {
	dialectTx
	*postgresImpl
}

func postgresLogStmt(stmt string, args ...interface{}) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pretty []interface{}

func (p pretty) Format(f fmt.State, c rune) {
	fmt.Fprint(f, "[")
nextval:
	for i, val := range p {
		if i > 0 {
			fmt.Fprint(f, ", ")
		}
		rv := reflect.ValueOf(val)
		if rv.Kind() == reflect.Ptr {
			if rv.IsNil() {
				fmt.Fprint(f, "NULL")
				continue
			}
			val = rv.Elem().Interface()
		}
		switch v := val.(type) {
		case string:
			fmt.Fprintf(f, "%q", v)
		case time.Time:
			fmt.Fprintf(f, "%s", v.Format(time.RFC3339Nano))
		case []byte:
			for _, b := range v {
				if !unicode.IsPrint(rune(b)) {
					fmt.Fprintf(f, "%#x", v)
					continue nextval
				}
			}
			fmt.Fprintf(f, "%q", v)
		default:
			fmt.Fprintf(f, "%v", v)
		}
	}
	fmt.Fprint(f, "]")
}

type Groups struct {
	Cipher          string
	Groupname       string
	Educationalyear string
	Semester        string
	Course          string
	Subject         int
}

func (Groups) _Table() string { return "groups_s" }

type Groups_Update_Fields struct {
}

type Groups_Cipher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Groups_Cipher(v string) Groups_Cipher_Field {
	return Groups_Cipher_Field{_set: true, _value: v}
}

func (f Groups_Cipher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Cipher_Field) _Column() string { return "cipher" }

type Groups_Groupname_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Groups_Groupname(v string) Groups_Groupname_Field {
	return Groups_Groupname_Field{_set: true, _value: v}
}

func (f Groups_Groupname_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Groupname_Field) _Column() string { return "groupname" }

type Groups_Educationalyear_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Groups_Educationalyear(v string) Groups_Educationalyear_Field {
	return Groups_Educationalyear_Field{_set: true, _value: v}
}

func (f Groups_Educationalyear_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Educationalyear_Field) _Column() string { return "educationalyear" }

type Groups_Semester_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Groups_Semester(v string) Groups_Semester_Field {
	return Groups_Semester_Field{_set: true, _value: v}
}

func (f Groups_Semester_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Semester_Field) _Column() string { return "semester" }

type Groups_Course_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Groups_Course(v string) Groups_Course_Field {
	return Groups_Course_Field{_set: true, _value: v}
}

func (f Groups_Course_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Course_Field) _Column() string { return "course" }

type Groups_Subject_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Groups_Subject(v int) Groups_Subject_Field {
	return Groups_Subject_Field{_set: true, _value: v}
}

func (f Groups_Subject_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Groups_Subject_Field) _Column() string { return "subject" }

type Runner struct {
	RunnerNumber      int
	DateOfCompilation time.Time
	DateOfExpiration  time.Time
	PostponingReason  string
	TypeOfControl     string
	Teacher           string
}

func (Runner) _Table() string { return "runners" }

type Runner_Update_Fields struct {
}

type Runner_RunnerNumber_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Runner_RunnerNumber(v int) Runner_RunnerNumber_Field {
	return Runner_RunnerNumber_Field{_set: true, _value: v}
}

func (f Runner_RunnerNumber_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_RunnerNumber_Field) _Column() string { return "runner_number" }

type Runner_DateOfCompilation_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Runner_DateOfCompilation(v time.Time) Runner_DateOfCompilation_Field {
	return Runner_DateOfCompilation_Field{_set: true, _value: v}
}

func (f Runner_DateOfCompilation_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_DateOfCompilation_Field) _Column() string { return "date_of_compilation" }

type Runner_DateOfExpiration_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Runner_DateOfExpiration(v time.Time) Runner_DateOfExpiration_Field {
	return Runner_DateOfExpiration_Field{_set: true, _value: v}
}

func (f Runner_DateOfExpiration_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_DateOfExpiration_Field) _Column() string { return "date_of_expiration" }

type Runner_PostponingReason_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Runner_PostponingReason(v string) Runner_PostponingReason_Field {
	return Runner_PostponingReason_Field{_set: true, _value: v}
}

func (f Runner_PostponingReason_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_PostponingReason_Field) _Column() string { return "postponing_reason" }

type Runner_TypeOfControl_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Runner_TypeOfControl(v string) Runner_TypeOfControl_Field {
	return Runner_TypeOfControl_Field{_set: true, _value: v}
}

func (f Runner_TypeOfControl_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_TypeOfControl_Field) _Column() string { return "type_of_control" }

type Runner_Teacher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Runner_Teacher(v string) Runner_Teacher_Field {
	return Runner_Teacher_Field{_set: true, _value: v}
}

func (f Runner_Teacher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Runner_Teacher_Field) _Column() string { return "teacher" }

type RunnerMarks struct {
	CheckMark        int
	RunnerMarkNumber int
	NationalMark     string
	SemesterMark     int
	TogetherMark     int
	EctsMark         string
	SheetMark        int
	Runner           int
}

func (RunnerMarks) _Table() string { return "runner_marks" }

type RunnerMarks_Update_Fields struct {
}

type RunnerMarks_CheckMark_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_CheckMark(v int) RunnerMarks_CheckMark_Field {
	return RunnerMarks_CheckMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_CheckMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_CheckMark_Field) _Column() string { return "check_mark" }

type RunnerMarks_RunnerMarkNumber_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_RunnerMarkNumber(v int) RunnerMarks_RunnerMarkNumber_Field {
	return RunnerMarks_RunnerMarkNumber_Field{_set: true, _value: v}
}

func (f RunnerMarks_RunnerMarkNumber_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_RunnerMarkNumber_Field) _Column() string { return "runner_mark_number" }

type RunnerMarks_NationalMark_Field struct {
	_set   bool
	_null  bool
	_value string
}

func RunnerMarks_NationalMark(v string) RunnerMarks_NationalMark_Field {
	return RunnerMarks_NationalMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_NationalMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_NationalMark_Field) _Column() string { return "national_mark" }

type RunnerMarks_SemesterMark_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_SemesterMark(v int) RunnerMarks_SemesterMark_Field {
	return RunnerMarks_SemesterMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_SemesterMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_SemesterMark_Field) _Column() string { return "semester_mark" }

type RunnerMarks_TogetherMark_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_TogetherMark(v int) RunnerMarks_TogetherMark_Field {
	return RunnerMarks_TogetherMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_TogetherMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_TogetherMark_Field) _Column() string { return "together_mark" }

type RunnerMarks_EctsMark_Field struct {
	_set   bool
	_null  bool
	_value string
}

func RunnerMarks_EctsMark(v string) RunnerMarks_EctsMark_Field {
	return RunnerMarks_EctsMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_EctsMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_EctsMark_Field) _Column() string { return "ects_mark" }

type RunnerMarks_SheetMark_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_SheetMark(v int) RunnerMarks_SheetMark_Field {
	return RunnerMarks_SheetMark_Field{_set: true, _value: v}
}

func (f RunnerMarks_SheetMark_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_SheetMark_Field) _Column() string { return "sheet_mark" }

type RunnerMarks_Runner_Field struct {
	_set   bool
	_null  bool
	_value int
}

func RunnerMarks_Runner(v int) RunnerMarks_Runner_Field {
	return RunnerMarks_Runner_Field{_set: true, _value: v}
}

func (f RunnerMarks_Runner_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (RunnerMarks_Runner_Field) _Column() string { return "runner" }

type Sheet struct {
	Sheetid            int
	NumberOfAttendees  int
	NumberOfAbsent     int
	NumberOfIneligible int
	TypeOfControl      string
	DateOfCompilation  time.Time
	Teacher            string
	GroupCipher        string
}

func (Sheet) _Table() string { return "sheets" }

type Sheet_Update_Fields struct {
}

type Sheet_Sheetid_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Sheet_Sheetid(v int) Sheet_Sheetid_Field {
	return Sheet_Sheetid_Field{_set: true, _value: v}
}

func (f Sheet_Sheetid_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_Sheetid_Field) _Column() string { return "sheetid" }

type Sheet_NumberOfAttendees_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Sheet_NumberOfAttendees(v int) Sheet_NumberOfAttendees_Field {
	return Sheet_NumberOfAttendees_Field{_set: true, _value: v}
}

func (f Sheet_NumberOfAttendees_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_NumberOfAttendees_Field) _Column() string { return "number_of_attendees" }

type Sheet_NumberOfAbsent_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Sheet_NumberOfAbsent(v int) Sheet_NumberOfAbsent_Field {
	return Sheet_NumberOfAbsent_Field{_set: true, _value: v}
}

func (f Sheet_NumberOfAbsent_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_NumberOfAbsent_Field) _Column() string { return "number_of_absent" }

type Sheet_NumberOfIneligible_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Sheet_NumberOfIneligible(v int) Sheet_NumberOfIneligible_Field {
	return Sheet_NumberOfIneligible_Field{_set: true, _value: v}
}

func (f Sheet_NumberOfIneligible_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_NumberOfIneligible_Field) _Column() string { return "number_of_ineligible" }

type Sheet_TypeOfControl_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Sheet_TypeOfControl(v string) Sheet_TypeOfControl_Field {
	return Sheet_TypeOfControl_Field{_set: true, _value: v}
}

func (f Sheet_TypeOfControl_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_TypeOfControl_Field) _Column() string { return "type_of_control" }

type Sheet_DateOfCompilation_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Sheet_DateOfCompilation(v time.Time) Sheet_DateOfCompilation_Field {
	return Sheet_DateOfCompilation_Field{_set: true, _value: v}
}

func (f Sheet_DateOfCompilation_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_DateOfCompilation_Field) _Column() string { return "date_of_compilation" }

type Sheet_Teacher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Sheet_Teacher(v string) Sheet_Teacher_Field {
	return Sheet_Teacher_Field{_set: true, _value: v}
}

func (f Sheet_Teacher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_Teacher_Field) _Column() string { return "teacher" }

type Sheet_GroupCipher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Sheet_GroupCipher(v string) Sheet_GroupCipher_Field {
	return Sheet_GroupCipher_Field{_set: true, _value: v}
}

func (f Sheet_GroupCipher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Sheet_GroupCipher_Field) _Column() string { return "group_cipher" }

type Student struct {
	StudentCipher    string
	Firstname        string
	LastName         string
	MiddleName       string
	RecordBookNumber string
}

func (Student) _Table() string { return "students" }

type Student_Update_Fields struct {
}

type Student_StudentCipher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Student_StudentCipher(v string) Student_StudentCipher_Field {
	return Student_StudentCipher_Field{_set: true, _value: v}
}

func (f Student_StudentCipher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Student_StudentCipher_Field) _Column() string { return "student_cipher" }

type Student_Firstname_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Student_Firstname(v string) Student_Firstname_Field {
	return Student_Firstname_Field{_set: true, _value: v}
}

func (f Student_Firstname_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Student_Firstname_Field) _Column() string { return "firstname" }

type Student_LastName_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Student_LastName(v string) Student_LastName_Field {
	return Student_LastName_Field{_set: true, _value: v}
}

func (f Student_LastName_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Student_LastName_Field) _Column() string { return "last_name" }

type Student_MiddleName_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Student_MiddleName(v string) Student_MiddleName_Field {
	return Student_MiddleName_Field{_set: true, _value: v}
}

func (f Student_MiddleName_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Student_MiddleName_Field) _Column() string { return "middle_name" }

type Student_RecordBookNumber_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Student_RecordBookNumber(v string) Student_RecordBookNumber_Field {
	return Student_RecordBookNumber_Field{_set: true, _value: v}
}

func (f Student_RecordBookNumber_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Student_RecordBookNumber_Field) _Column() string { return "record_book_number" }

type Subjects struct {
	Subjectid        int
	Subjectname      string
	Educationallevel string
	Faculty          string
}

func (Subjects) _Table() string { return "subjects" }

type Subjects_Update_Fields struct {
}

type Subjects_Subjectid_Field struct {
	_set   bool
	_null  bool
	_value int
}

func Subjects_Subjectid(v int) Subjects_Subjectid_Field {
	return Subjects_Subjectid_Field{_set: true, _value: v}
}

func (f Subjects_Subjectid_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Subjects_Subjectid_Field) _Column() string { return "subjectid" }

type Subjects_Subjectname_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Subjects_Subjectname(v string) Subjects_Subjectname_Field {
	return Subjects_Subjectname_Field{_set: true, _value: v}
}

func (f Subjects_Subjectname_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Subjects_Subjectname_Field) _Column() string { return "subjectname" }

type Subjects_Educationallevel_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Subjects_Educationallevel(v string) Subjects_Educationallevel_Field {
	return Subjects_Educationallevel_Field{_set: true, _value: v}
}

func (f Subjects_Educationallevel_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Subjects_Educationallevel_Field) _Column() string { return "educationallevel" }

type Subjects_Faculty_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Subjects_Faculty(v string) Subjects_Faculty_Field {
	return Subjects_Faculty_Field{_set: true, _value: v}
}

func (f Subjects_Faculty_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Subjects_Faculty_Field) _Column() string { return "faculty" }

type TableNew struct {
	IdT string
}

func (TableNew) _Table() string { return "tableNews" }

type TableNew_Update_Fields struct {
}

type TableNew_IdT_Field struct {
	_set   bool
	_null  bool
	_value string
}

func TableNew_IdT(v string) TableNew_IdT_Field {
	return TableNew_IdT_Field{_set: true, _value: v}
}

func (f TableNew_IdT_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (TableNew_IdT_Field) _Column() string { return "id_t" }

type Teachers struct {
	TeacherCipher    string
	Firstname        string
	Lastname         string
	Middlename       string
	Scientificdegree string
	Academictitles   string
	Post             string
}

func (Teachers) _Table() string { return "teachers" }

type Teachers_Update_Fields struct {
}

type Teachers_TeacherCipher_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_TeacherCipher(v string) Teachers_TeacherCipher_Field {
	return Teachers_TeacherCipher_Field{_set: true, _value: v}
}

func (f Teachers_TeacherCipher_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_TeacherCipher_Field) _Column() string { return "teacher_cipher" }

type Teachers_Firstname_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Firstname(v string) Teachers_Firstname_Field {
	return Teachers_Firstname_Field{_set: true, _value: v}
}

func (f Teachers_Firstname_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Firstname_Field) _Column() string { return "firstname" }

type Teachers_Lastname_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Lastname(v string) Teachers_Lastname_Field {
	return Teachers_Lastname_Field{_set: true, _value: v}
}

func (f Teachers_Lastname_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Lastname_Field) _Column() string { return "lastname" }

type Teachers_Middlename_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Middlename(v string) Teachers_Middlename_Field {
	return Teachers_Middlename_Field{_set: true, _value: v}
}

func (f Teachers_Middlename_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Middlename_Field) _Column() string { return "middlename" }

type Teachers_Scientificdegree_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Scientificdegree(v string) Teachers_Scientificdegree_Field {
	return Teachers_Scientificdegree_Field{_set: true, _value: v}
}

func (f Teachers_Scientificdegree_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Scientificdegree_Field) _Column() string { return "scientificdegree" }

type Teachers_Academictitles_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Academictitles(v string) Teachers_Academictitles_Field {
	return Teachers_Academictitles_Field{_set: true, _value: v}
}

func (f Teachers_Academictitles_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Academictitles_Field) _Column() string { return "academictitles" }

type Teachers_Post_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Teachers_Post(v string) Teachers_Post_Field {
	return Teachers_Post_Field{_set: true, _value: v}
}

func (f Teachers_Post_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Teachers_Post_Field) _Column() string { return "post" }

func toUTC(t time.Time) time.Time {
	return t.UTC()
}

func toDate(t time.Time) time.Time {
	// keep up the minute portion so that translations between timezones will
	// continue to reflect properly.
	return t.Truncate(time.Minute)
}

//
// runtime support for building sql statements
//

type __sqlbundle_SQL interface {
	Render() string

	private()
}

type __sqlbundle_Dialect interface {
	Rebind(sql string) string
}

type __sqlbundle_RenderOp int

const (
	__sqlbundle_NoFlatten __sqlbundle_RenderOp = iota
	__sqlbundle_NoTerminate
)

func __sqlbundle_Render(dialect __sqlbundle_Dialect, sql __sqlbundle_SQL, ops ...__sqlbundle_RenderOp) string {
	out := sql.Render()

	flatten := true
	terminate := true
	for _, op := range ops {
		switch op {
		case __sqlbundle_NoFlatten:
			flatten = false
		case __sqlbundle_NoTerminate:
			terminate = false
		}
	}

	if flatten {
		out = __sqlbundle_flattenSQL(out)
	}
	if terminate {
		out += ";"
	}

	return dialect.Rebind(out)
}

func __sqlbundle_flattenSQL(x string) string {
	// trim whitespace from beginning and end
	s, e := 0, len(x)-1
	for s < len(x) && (x[s] == ' ' || x[s] == '\t' || x[s] == '\n') {
		s++
	}
	for s <= e && (x[e] == ' ' || x[e] == '\t' || x[e] == '\n') {
		e--
	}
	if s > e {
		return ""
	}
	x = x[s : e+1]

	// check for whitespace that needs fixing
	wasSpace := false
	for i := 0; i < len(x); i++ {
		r := x[i]
		justSpace := r == ' '
		if (wasSpace && justSpace) || r == '\t' || r == '\n' {
			// whitespace detected, start writing a new string
			var result strings.Builder
			result.Grow(len(x))
			if wasSpace {
				result.WriteString(x[:i-1])
			} else {
				result.WriteString(x[:i])
			}
			for p := i; p < len(x); p++ {
				for p < len(x) && (x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteByte(' ')

				start := p
				for p < len(x) && !(x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteString(x[start:p])
			}

			return result.String()
		}
		wasSpace = justSpace
	}

	// no problematic whitespace found
	return x
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_postgres struct{}

func (p __sqlbundle_postgres) Rebind(sql string) string {
	type sqlParseState int
	const (
		sqlParseStart sqlParseState = iota
		sqlParseInStringLiteral
		sqlParseInQuotedIdentifier
		sqlParseInComment
	)

	out := make([]byte, 0, len(sql)+10)

	j := 1
	state := sqlParseStart
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		switch state {
		case sqlParseStart:
			switch ch {
			case '?':
				out = append(out, '$')
				out = append(out, strconv.Itoa(j)...)
				state = sqlParseStart
				j++
				continue
			case '-':
				if i+1 < len(sql) && sql[i+1] == '-' {
					state = sqlParseInComment
				}
			case '"':
				state = sqlParseInQuotedIdentifier
			case '\'':
				state = sqlParseInStringLiteral
			}
		case sqlParseInStringLiteral:
			if ch == '\'' {
				state = sqlParseStart
			}
		case sqlParseInQuotedIdentifier:
			if ch == '"' {
				state = sqlParseStart
			}
		case sqlParseInComment:
			if ch == '\n' {
				state = sqlParseStart
			}
		}
		out = append(out, ch)
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_sqlite3 struct{}

func (s __sqlbundle_sqlite3) Rebind(sql string) string {
	return sql
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_cockroach struct{}

func (p __sqlbundle_cockroach) Rebind(sql string) string {
	type sqlParseState int
	const (
		sqlParseStart sqlParseState = iota
		sqlParseInStringLiteral
		sqlParseInQuotedIdentifier
		sqlParseInComment
	)

	out := make([]byte, 0, len(sql)+10)

	j := 1
	state := sqlParseStart
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		switch state {
		case sqlParseStart:
			switch ch {
			case '?':
				out = append(out, '$')
				out = append(out, strconv.Itoa(j)...)
				state = sqlParseStart
				j++
				continue
			case '-':
				if i+1 < len(sql) && sql[i+1] == '-' {
					state = sqlParseInComment
				}
			case '"':
				state = sqlParseInQuotedIdentifier
			case '\'':
				state = sqlParseInStringLiteral
			}
		case sqlParseInStringLiteral:
			if ch == '\'' {
				state = sqlParseStart
			}
		case sqlParseInQuotedIdentifier:
			if ch == '"' {
				state = sqlParseStart
			}
		case sqlParseInComment:
			if ch == '\n' {
				state = sqlParseStart
			}
		}
		out = append(out, ch)
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_pgx struct{}

func (p __sqlbundle_pgx) Rebind(sql string) string {
	type sqlParseState int
	const (
		sqlParseStart sqlParseState = iota
		sqlParseInStringLiteral
		sqlParseInQuotedIdentifier
		sqlParseInComment
	)

	out := make([]byte, 0, len(sql)+10)

	j := 1
	state := sqlParseStart
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		switch state {
		case sqlParseStart:
			switch ch {
			case '?':
				out = append(out, '$')
				out = append(out, strconv.Itoa(j)...)
				state = sqlParseStart
				j++
				continue
			case '-':
				if i+1 < len(sql) && sql[i+1] == '-' {
					state = sqlParseInComment
				}
			case '"':
				state = sqlParseInQuotedIdentifier
			case '\'':
				state = sqlParseInStringLiteral
			}
		case sqlParseInStringLiteral:
			if ch == '\'' {
				state = sqlParseStart
			}
		case sqlParseInQuotedIdentifier:
			if ch == '"' {
				state = sqlParseStart
			}
		case sqlParseInComment:
			if ch == '\n' {
				state = sqlParseStart
			}
		}
		out = append(out, ch)
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_pgxcockroach struct{}

func (p __sqlbundle_pgxcockroach) Rebind(sql string) string {
	type sqlParseState int
	const (
		sqlParseStart sqlParseState = iota
		sqlParseInStringLiteral
		sqlParseInQuotedIdentifier
		sqlParseInComment
	)

	out := make([]byte, 0, len(sql)+10)

	j := 1
	state := sqlParseStart
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		switch state {
		case sqlParseStart:
			switch ch {
			case '?':
				out = append(out, '$')
				out = append(out, strconv.Itoa(j)...)
				state = sqlParseStart
				j++
				continue
			case '-':
				if i+1 < len(sql) && sql[i+1] == '-' {
					state = sqlParseInComment
				}
			case '"':
				state = sqlParseInQuotedIdentifier
			case '\'':
				state = sqlParseInStringLiteral
			}
		case sqlParseInStringLiteral:
			if ch == '\'' {
				state = sqlParseStart
			}
		case sqlParseInQuotedIdentifier:
			if ch == '"' {
				state = sqlParseStart
			}
		case sqlParseInComment:
			if ch == '\n' {
				state = sqlParseStart
			}
		}
		out = append(out, ch)
	}

	return string(out)
}

type __sqlbundle_Literal string

func (__sqlbundle_Literal) private() {}

func (l __sqlbundle_Literal) Render() string { return string(l) }

type __sqlbundle_Literals struct {
	Join string
	SQLs []__sqlbundle_SQL
}

func (__sqlbundle_Literals) private() {}

func (l __sqlbundle_Literals) Render() string {
	var out bytes.Buffer

	first := true
	for _, sql := range l.SQLs {
		if sql == nil {
			continue
		}
		if !first {
			out.WriteString(l.Join)
		}
		first = false
		out.WriteString(sql.Render())
	}

	return out.String()
}

type __sqlbundle_Condition struct {
	// set at compile/embed time
	Name  string
	Left  string
	Equal bool
	Right string

	// set at runtime
	Null bool
}

func (*__sqlbundle_Condition) private() {}

func (c *__sqlbundle_Condition) Render() string {
	// TODO(jeff): maybe check if we can use placeholders instead of the
	// literal null: this would make the templates easier.

	switch {
	case c.Equal && c.Null:
		return c.Left + " is null"
	case c.Equal && !c.Null:
		return c.Left + " = " + c.Right
	case !c.Equal && c.Null:
		return c.Left + " is not null"
	case !c.Equal && !c.Null:
		return c.Left + " != " + c.Right
	default:
		panic("unhandled case")
	}
}

type __sqlbundle_Hole struct {
	// set at compiile/embed time
	Name string

	// set at runtime or possibly embed time
	SQL __sqlbundle_SQL
}

func (*__sqlbundle_Hole) private() {}

func (h *__sqlbundle_Hole) Render() string {
	if h.SQL == nil {
		return ""
	}
	return h.SQL.Render()
}

//
// end runtime support for building sql statements
//

func (obj *postgresImpl) Create_TableNew(ctx context.Context,
	tableNew_id_t TableNew_IdT_Field) (
	tableNew *TableNew, err error) {
	__id_t_val := tableNew_id_t.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO tableNews ( id_t ) VALUES ( ? ) RETURNING tableNews.id_t")

	var __values []interface{}
	__values = append(__values, __id_t_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	tableNew = &TableNew{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&tableNew.IdT)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return tableNew, nil

}

func (obj *postgresImpl) Create_Subjects(ctx context.Context,
	subjects_subjectid Subjects_Subjectid_Field,
	subjects_subjectname Subjects_Subjectname_Field,
	subjects_educationallevel Subjects_Educationallevel_Field,
	subjects_faculty Subjects_Faculty_Field) (
	subjects *Subjects, err error) {
	__subjectid_val := subjects_subjectid.value()
	__subjectname_val := subjects_subjectname.value()
	__educationallevel_val := subjects_educationallevel.value()
	__faculty_val := subjects_faculty.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO subjects ( subjectid, subjectname, educationallevel, faculty ) VALUES ( ?, ?, ?, ? ) RETURNING subjects.subjectid, subjects.subjectname, subjects.educationallevel, subjects.faculty")

	var __values []interface{}
	__values = append(__values, __subjectid_val, __subjectname_val, __educationallevel_val, __faculty_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	subjects = &Subjects{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&subjects.Subjectid, &subjects.Subjectname, &subjects.Educationallevel, &subjects.Faculty)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return subjects, nil

}

func (obj *postgresImpl) Create_Groups(ctx context.Context,
	groups__cipher Groups_Cipher_Field,
	groups__groupname Groups_Groupname_Field,
	groups__educationalyear Groups_Educationalyear_Field,
	groups__semester Groups_Semester_Field,
	groups__course Groups_Course_Field,
	groups__subject Groups_Subject_Field) (
	groups_ *Groups, err error) {
	__cipher_val := groups__cipher.value()
	__groupname_val := groups__groupname.value()
	__educationalyear_val := groups__educationalyear.value()
	__semester_val := groups__semester.value()
	__course_val := groups__course.value()
	__subject_val := groups__subject.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO groups_s ( cipher, groupname, educationalyear, semester, course, subject ) VALUES ( ?, ?, ?, ?, ?, ? ) RETURNING groups_s.cipher, groups_s.groupname, groups_s.educationalyear, groups_s.semester, groups_s.course, groups_s.subject")

	var __values []interface{}
	__values = append(__values, __cipher_val, __groupname_val, __educationalyear_val, __semester_val, __course_val, __subject_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	groups_ = &Groups{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&groups_.Cipher, &groups_.Groupname, &groups_.Educationalyear, &groups_.Semester, &groups_.Course, &groups_.Subject)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return groups_, nil

}

func (obj *postgresImpl) Create_Student(ctx context.Context,
	student_student_cipher Student_StudentCipher_Field,
	student_firstname Student_Firstname_Field,
	student_last_name Student_LastName_Field,
	student_middle_name Student_MiddleName_Field,
	student_record_book_number Student_RecordBookNumber_Field) (
	student *Student, err error) {
	__student_cipher_val := student_student_cipher.value()
	__firstname_val := student_firstname.value()
	__last_name_val := student_last_name.value()
	__middle_name_val := student_middle_name.value()
	__record_book_number_val := student_record_book_number.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO students ( student_cipher, firstname, last_name, middle_name, record_book_number ) VALUES ( ?, ?, ?, ?, ? ) RETURNING students.student_cipher, students.firstname, students.last_name, students.middle_name, students.record_book_number")

	var __values []interface{}
	__values = append(__values, __student_cipher_val, __firstname_val, __last_name_val, __middle_name_val, __record_book_number_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	student = &Student{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&student.StudentCipher, &student.Firstname, &student.LastName, &student.MiddleName, &student.RecordBookNumber)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return student, nil

}

func (obj *postgresImpl) Create_Teachers(ctx context.Context,
	teachers_teacher_cipher Teachers_TeacherCipher_Field,
	teachers_firstname Teachers_Firstname_Field,
	teachers_lastname Teachers_Lastname_Field,
	teachers_middlename Teachers_Middlename_Field,
	teachers_scientificdegree Teachers_Scientificdegree_Field,
	teachers_academictitles Teachers_Academictitles_Field,
	teachers_post Teachers_Post_Field) (
	teachers *Teachers, err error) {
	__teacher_cipher_val := teachers_teacher_cipher.value()
	__firstname_val := teachers_firstname.value()
	__lastname_val := teachers_lastname.value()
	__middlename_val := teachers_middlename.value()
	__scientificdegree_val := teachers_scientificdegree.value()
	__academictitles_val := teachers_academictitles.value()
	__post_val := teachers_post.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO teachers ( teacher_cipher, firstname, lastname, middlename, scientificdegree, academictitles, post ) VALUES ( ?, ?, ?, ?, ?, ?, ? ) RETURNING teachers.teacher_cipher, teachers.firstname, teachers.lastname, teachers.middlename, teachers.scientificdegree, teachers.academictitles, teachers.post")

	var __values []interface{}
	__values = append(__values, __teacher_cipher_val, __firstname_val, __lastname_val, __middlename_val, __scientificdegree_val, __academictitles_val, __post_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	teachers = &Teachers{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&teachers.TeacherCipher, &teachers.Firstname, &teachers.Lastname, &teachers.Middlename, &teachers.Scientificdegree, &teachers.Academictitles, &teachers.Post)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return teachers, nil

}

func (obj *postgresImpl) Create_Sheet(ctx context.Context,
	sheet_sheetid Sheet_Sheetid_Field,
	sheet_number_of_attendees Sheet_NumberOfAttendees_Field,
	sheet_number_of_absent Sheet_NumberOfAbsent_Field,
	sheet_number_of_ineligible Sheet_NumberOfIneligible_Field,
	sheet_type_of_control Sheet_TypeOfControl_Field,
	sheet_date_of_compilation Sheet_DateOfCompilation_Field,
	sheet_teacher Sheet_Teacher_Field,
	sheet_group_cipher Sheet_GroupCipher_Field) (
	sheet *Sheet, err error) {
	__sheetid_val := sheet_sheetid.value()
	__number_of_attendees_val := sheet_number_of_attendees.value()
	__number_of_absent_val := sheet_number_of_absent.value()
	__number_of_ineligible_val := sheet_number_of_ineligible.value()
	__type_of_control_val := sheet_type_of_control.value()
	__date_of_compilation_val := sheet_date_of_compilation.value()
	__teacher_val := sheet_teacher.value()
	__group_cipher_val := sheet_group_cipher.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO sheets ( sheetid, number_of_attendees, number_of_absent, number_of_ineligible, type_of_control, date_of_compilation, teacher, group_cipher ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING sheets.sheetid, sheets.number_of_attendees, sheets.number_of_absent, sheets.number_of_ineligible, sheets.type_of_control, sheets.date_of_compilation, sheets.teacher, sheets.group_cipher")

	var __values []interface{}
	__values = append(__values, __sheetid_val, __number_of_attendees_val, __number_of_absent_val, __number_of_ineligible_val, __type_of_control_val, __date_of_compilation_val, __teacher_val, __group_cipher_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	sheet = &Sheet{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&sheet.Sheetid, &sheet.NumberOfAttendees, &sheet.NumberOfAbsent, &sheet.NumberOfIneligible, &sheet.TypeOfControl, &sheet.DateOfCompilation, &sheet.Teacher, &sheet.GroupCipher)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return sheet, nil

}

func (obj *postgresImpl) Create_RunnerMarks(ctx context.Context,
	runner_marks_check_mark RunnerMarks_CheckMark_Field,
	runner_marks_runner_mark_number RunnerMarks_RunnerMarkNumber_Field,
	runner_marks_national_mark RunnerMarks_NationalMark_Field,
	runner_marks_semester_mark RunnerMarks_SemesterMark_Field,
	runner_marks_together_mark RunnerMarks_TogetherMark_Field,
	runner_marks_ects_mark RunnerMarks_EctsMark_Field,
	runner_marks_sheet_mark RunnerMarks_SheetMark_Field,
	runner_marks_runner RunnerMarks_Runner_Field) (
	runner_marks *RunnerMarks, err error) {
	__check_mark_val := runner_marks_check_mark.value()
	__runner_mark_number_val := runner_marks_runner_mark_number.value()
	__national_mark_val := runner_marks_national_mark.value()
	__semester_mark_val := runner_marks_semester_mark.value()
	__together_mark_val := runner_marks_together_mark.value()
	__ects_mark_val := runner_marks_ects_mark.value()
	__sheet_mark_val := runner_marks_sheet_mark.value()
	__runner_val := runner_marks_runner.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO runner_marks ( check_mark, runner_mark_number, national_mark, semester_mark, together_mark, ects_mark, sheet_mark, runner ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? ) RETURNING runner_marks.check_mark, runner_marks.runner_mark_number, runner_marks.national_mark, runner_marks.semester_mark, runner_marks.together_mark, runner_marks.ects_mark, runner_marks.sheet_mark, runner_marks.runner")

	var __values []interface{}
	__values = append(__values, __check_mark_val, __runner_mark_number_val, __national_mark_val, __semester_mark_val, __together_mark_val, __ects_mark_val, __sheet_mark_val, __runner_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	runner_marks = &RunnerMarks{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&runner_marks.CheckMark, &runner_marks.RunnerMarkNumber, &runner_marks.NationalMark, &runner_marks.SemesterMark, &runner_marks.TogetherMark, &runner_marks.EctsMark, &runner_marks.SheetMark, &runner_marks.Runner)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return runner_marks, nil

}

func (obj *postgresImpl) Create_Runner(ctx context.Context,
	runner_runner_number Runner_RunnerNumber_Field,
	runner_date_of_compilation Runner_DateOfCompilation_Field,
	runner_date_of_expiration Runner_DateOfExpiration_Field,
	runner_postponing_reason Runner_PostponingReason_Field,
	runner_type_of_control Runner_TypeOfControl_Field,
	runner_teacher Runner_Teacher_Field) (
	runner *Runner, err error) {
	__runner_number_val := runner_runner_number.value()
	__date_of_compilation_val := runner_date_of_compilation.value()
	__date_of_expiration_val := runner_date_of_expiration.value()
	__postponing_reason_val := runner_postponing_reason.value()
	__type_of_control_val := runner_type_of_control.value()
	__teacher_val := runner_teacher.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO runners ( runner_number, date_of_compilation, date_of_expiration, postponing_reason, type_of_control, teacher ) VALUES ( ?, ?, ?, ?, ?, ? ) RETURNING runners.runner_number, runners.date_of_compilation, runners.date_of_expiration, runners.postponing_reason, runners.type_of_control, runners.teacher")

	var __values []interface{}
	__values = append(__values, __runner_number_val, __date_of_compilation_val, __date_of_expiration_val, __postponing_reason_val, __type_of_control_val, __teacher_val)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	runner = &Runner{}
	err = obj.driver.QueryRowContext(ctx, __stmt, __values...).Scan(&runner.RunnerNumber, &runner.DateOfCompilation, &runner.DateOfExpiration, &runner.PostponingReason, &runner.TypeOfControl, &runner.Teacher)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return runner, nil

}

func (impl postgresImpl) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(*pq.Error); ok {
		if e.Code.Class() == "23" {
			return e.Constraint, true
		}
	}
	return "", false
}

func (obj *postgresImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM teachers;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM tableNews;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM subjects;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM students;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM sheets;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM runner_marks;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM runners;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.ExecContext(ctx, "DELETE FROM groups_s;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

type Rx struct {
	db *DB
	tx *Tx
}

func (rx *Rx) UnsafeTx(ctx context.Context) (unsafe_tx *sql.Tx, err error) {
	tx, err := rx.getTx(ctx)
	if err != nil {
		return nil, err
	}
	return tx.Tx, nil
}

func (rx *Rx) getTx(ctx context.Context) (tx *Tx, err error) {
	if rx.tx == nil {
		if rx.tx, err = rx.db.Open(ctx); err != nil {
			return nil, err
		}
	}
	return rx.tx, nil
}

func (rx *Rx) Rebind(s string) string {
	return rx.db.Rebind(s)
}

func (rx *Rx) Commit() (err error) {
	if rx.tx != nil {
		err = rx.tx.Commit()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) Rollback() (err error) {
	if rx.tx != nil {
		err = rx.tx.Rollback()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) Create_Groups(ctx context.Context,
	groups__cipher Groups_Cipher_Field,
	groups__groupname Groups_Groupname_Field,
	groups__educationalyear Groups_Educationalyear_Field,
	groups__semester Groups_Semester_Field,
	groups__course Groups_Course_Field,
	groups__subject Groups_Subject_Field) (
	groups_ *Groups, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Groups(ctx, groups__cipher, groups__groupname, groups__educationalyear, groups__semester, groups__course, groups__subject)

}

func (rx *Rx) Create_Runner(ctx context.Context,
	runner_runner_number Runner_RunnerNumber_Field,
	runner_date_of_compilation Runner_DateOfCompilation_Field,
	runner_date_of_expiration Runner_DateOfExpiration_Field,
	runner_postponing_reason Runner_PostponingReason_Field,
	runner_type_of_control Runner_TypeOfControl_Field,
	runner_teacher Runner_Teacher_Field) (
	runner *Runner, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Runner(ctx, runner_runner_number, runner_date_of_compilation, runner_date_of_expiration, runner_postponing_reason, runner_type_of_control, runner_teacher)

}

func (rx *Rx) Create_RunnerMarks(ctx context.Context,
	runner_marks_check_mark RunnerMarks_CheckMark_Field,
	runner_marks_runner_mark_number RunnerMarks_RunnerMarkNumber_Field,
	runner_marks_national_mark RunnerMarks_NationalMark_Field,
	runner_marks_semester_mark RunnerMarks_SemesterMark_Field,
	runner_marks_together_mark RunnerMarks_TogetherMark_Field,
	runner_marks_ects_mark RunnerMarks_EctsMark_Field,
	runner_marks_sheet_mark RunnerMarks_SheetMark_Field,
	runner_marks_runner RunnerMarks_Runner_Field) (
	runner_marks *RunnerMarks, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_RunnerMarks(ctx, runner_marks_check_mark, runner_marks_runner_mark_number, runner_marks_national_mark, runner_marks_semester_mark, runner_marks_together_mark, runner_marks_ects_mark, runner_marks_sheet_mark, runner_marks_runner)

}

func (rx *Rx) Create_Sheet(ctx context.Context,
	sheet_sheetid Sheet_Sheetid_Field,
	sheet_number_of_attendees Sheet_NumberOfAttendees_Field,
	sheet_number_of_absent Sheet_NumberOfAbsent_Field,
	sheet_number_of_ineligible Sheet_NumberOfIneligible_Field,
	sheet_type_of_control Sheet_TypeOfControl_Field,
	sheet_date_of_compilation Sheet_DateOfCompilation_Field,
	sheet_teacher Sheet_Teacher_Field,
	sheet_group_cipher Sheet_GroupCipher_Field) (
	sheet *Sheet, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Sheet(ctx, sheet_sheetid, sheet_number_of_attendees, sheet_number_of_absent, sheet_number_of_ineligible, sheet_type_of_control, sheet_date_of_compilation, sheet_teacher, sheet_group_cipher)

}

func (rx *Rx) Create_Student(ctx context.Context,
	student_student_cipher Student_StudentCipher_Field,
	student_firstname Student_Firstname_Field,
	student_last_name Student_LastName_Field,
	student_middle_name Student_MiddleName_Field,
	student_record_book_number Student_RecordBookNumber_Field) (
	student *Student, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Student(ctx, student_student_cipher, student_firstname, student_last_name, student_middle_name, student_record_book_number)

}

func (rx *Rx) Create_Subjects(ctx context.Context,
	subjects_subjectid Subjects_Subjectid_Field,
	subjects_subjectname Subjects_Subjectname_Field,
	subjects_educationallevel Subjects_Educationallevel_Field,
	subjects_faculty Subjects_Faculty_Field) (
	subjects *Subjects, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Subjects(ctx, subjects_subjectid, subjects_subjectname, subjects_educationallevel, subjects_faculty)

}

func (rx *Rx) Create_TableNew(ctx context.Context,
	tableNew_id_t TableNew_IdT_Field) (
	tableNew *TableNew, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_TableNew(ctx, tableNew_id_t)

}

func (rx *Rx) Create_Teachers(ctx context.Context,
	teachers_teacher_cipher Teachers_TeacherCipher_Field,
	teachers_firstname Teachers_Firstname_Field,
	teachers_lastname Teachers_Lastname_Field,
	teachers_middlename Teachers_Middlename_Field,
	teachers_scientificdegree Teachers_Scientificdegree_Field,
	teachers_academictitles Teachers_Academictitles_Field,
	teachers_post Teachers_Post_Field) (
	teachers *Teachers, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Teachers(ctx, teachers_teacher_cipher, teachers_firstname, teachers_lastname, teachers_middlename, teachers_scientificdegree, teachers_academictitles, teachers_post)

}

type Methods interface {
	Create_Groups(ctx context.Context,
		groups__cipher Groups_Cipher_Field,
		groups__groupname Groups_Groupname_Field,
		groups__educationalyear Groups_Educationalyear_Field,
		groups__semester Groups_Semester_Field,
		groups__course Groups_Course_Field,
		groups__subject Groups_Subject_Field) (
		groups_ *Groups, err error)

	Create_Runner(ctx context.Context,
		runner_runner_number Runner_RunnerNumber_Field,
		runner_date_of_compilation Runner_DateOfCompilation_Field,
		runner_date_of_expiration Runner_DateOfExpiration_Field,
		runner_postponing_reason Runner_PostponingReason_Field,
		runner_type_of_control Runner_TypeOfControl_Field,
		runner_teacher Runner_Teacher_Field) (
		runner *Runner, err error)

	Create_RunnerMarks(ctx context.Context,
		runner_marks_check_mark RunnerMarks_CheckMark_Field,
		runner_marks_runner_mark_number RunnerMarks_RunnerMarkNumber_Field,
		runner_marks_national_mark RunnerMarks_NationalMark_Field,
		runner_marks_semester_mark RunnerMarks_SemesterMark_Field,
		runner_marks_together_mark RunnerMarks_TogetherMark_Field,
		runner_marks_ects_mark RunnerMarks_EctsMark_Field,
		runner_marks_sheet_mark RunnerMarks_SheetMark_Field,
		runner_marks_runner RunnerMarks_Runner_Field) (
		runner_marks *RunnerMarks, err error)

	Create_Sheet(ctx context.Context,
		sheet_sheetid Sheet_Sheetid_Field,
		sheet_number_of_attendees Sheet_NumberOfAttendees_Field,
		sheet_number_of_absent Sheet_NumberOfAbsent_Field,
		sheet_number_of_ineligible Sheet_NumberOfIneligible_Field,
		sheet_type_of_control Sheet_TypeOfControl_Field,
		sheet_date_of_compilation Sheet_DateOfCompilation_Field,
		sheet_teacher Sheet_Teacher_Field,
		sheet_group_cipher Sheet_GroupCipher_Field) (
		sheet *Sheet, err error)

	Create_Student(ctx context.Context,
		student_student_cipher Student_StudentCipher_Field,
		student_firstname Student_Firstname_Field,
		student_last_name Student_LastName_Field,
		student_middle_name Student_MiddleName_Field,
		student_record_book_number Student_RecordBookNumber_Field) (
		student *Student, err error)

	Create_Subjects(ctx context.Context,
		subjects_subjectid Subjects_Subjectid_Field,
		subjects_subjectname Subjects_Subjectname_Field,
		subjects_educationallevel Subjects_Educationallevel_Field,
		subjects_faculty Subjects_Faculty_Field) (
		subjects *Subjects, err error)

	Create_TableNew(ctx context.Context,
		tableNew_id_t TableNew_IdT_Field) (
		tableNew *TableNew, err error)

	Create_Teachers(ctx context.Context,
		teachers_teacher_cipher Teachers_TeacherCipher_Field,
		teachers_firstname Teachers_Firstname_Field,
		teachers_lastname Teachers_Lastname_Field,
		teachers_middlename Teachers_Middlename_Field,
		teachers_scientificdegree Teachers_Scientificdegree_Field,
		teachers_academictitles Teachers_Academictitles_Field,
		teachers_post Teachers_Post_Field) (
		teachers *Teachers, err error)
}

type TxMethods interface {
	Methods

	Rebind(s string) string
	Commit() error
	Rollback() error
}

type txMethods interface {
	TxMethods

	deleteAll(ctx context.Context) (int64, error)
	makeErr(err error) error
}

type DBMethods interface {
	Methods

	Schema() string
	Rebind(sql string) string
}

type dbMethods interface {
	DBMethods

	wrapTx(tx *sql.Tx) txMethods
	makeErr(err error) error
}

func openpostgres(source string) (*sql.DB, error) {
	return sql.Open("postgres", source)
}
